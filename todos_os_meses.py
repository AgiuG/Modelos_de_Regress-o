# -*- coding: utf-8 -*-
"""Todos os meses.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aI9sPEYdG2fRoBCSwkOrCOzh95T0tK6p
"""

from google.colab import files
uploaded = files.upload()

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
# %matplotlib inline

import io
df = pd.read_csv(io.BytesIO(uploaded['dados_com_data.csv']))
df.head()

df

df.describe()

plt.figure(figsize=(12,8))
sns.set_style('darkgrid')
sns.distplot(df.Sales)

df.corr()

correlations = df.corr()
correlations['Sales']

columns = df.columns.drop(['Sales', 'Date'])
columns

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(df[columns],df['Sales'], test_size=0.20, random_state=42)

lr = LinearRegression()

model = lr.fit(X_train,y_train)

#Realizando a predição
resultado = model.predict(X_test)

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
plt.scatter(y_test, resultado)
range = [y_test.min(), resultado.max()]
plt.plot(range, range, 'red')
plt.xlabel('vendas real')
plt.ylabel('vendas predita')
plt.show()

mean_squared_error(y_test, resultado)

model.score(X_test,y_test)

resultado_treino = model.predict(X_train)
mean_squared_error(y_train, resultado_treino)

model.score(X_train,y_train)

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
plt.scatter(y_train, resultado_treino)
range = [y_train.min(), resultado_treino.max()]
plt.plot(range, range, 'red')
plt.xlabel('vendas real')
plt.ylabel('vendas predita')
plt.show()

tree = DecisionTreeRegressor()

model_tree = tree.fit(X_train,y_train)
resultado_tree = tree.predict(X_test)

mean_squared_error(y_test, resultado_tree)

model_tree.score(X_test,y_test)

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
plt.scatter(y_test, resultado_tree)
range = [y_test.min(), resultado_tree.max()]
plt.plot(range, range, 'red')
plt.xlabel('vendas real')
plt.ylabel('vendas predita')
plt.show()

tree_rf = RandomForestRegressor()

model_rf = tree_rf.fit(X_train, y_train)
resultado_rf = model_rf.predict(X_test)

mean_squared_error(y_test, resultado_rf)

model_rf.score(X_test,y_test)

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
plt.scatter(y_test, resultado_rf)
range = [y_test.min(), resultado_rf.max()]
plt.plot(range, range, 'red')
plt.xlabel('vendas real')
plt.ylabel('vendas predita')
plt.show()

from sklearn.model_selection import GridSearchCV

parametros = {'min_samples_leaf':[1,10],'min_samples_split':[2,10],'n_estimators':[100,250,500,750]}

rf = RandomForestRegressor()
grid = GridSearchCV(rf, parametros)

grid.fit(X_train, y_train)

grid.best_params_

rf_best = grid.best_estimator_

resultado_final = rf_best.predict(X_test)

mean_squared_error(y_test, resultado_final)

rf_best.score(X_test,y_test)

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
plt.scatter(y_test, resultado_final)
range = [y_test.min(), resultado_final.max()]
plt.plot(range, range, 'red')
plt.xlabel('vendas real')
plt.ylabel('vendas predita')
plt.show()